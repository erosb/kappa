{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kappa","text":"<p>Kappa is an OpenAPI library for the JVM. It supports contract-first API development, and can be used for</p> <ul> <li>Request validation</li> <li>Contract testing</li> </ul> <p>{ .annotate } Click here for understanding the differences</p> <p>Kappa provides first-class Spring Boot integration for both usecases. It also has adapters to work with other HTTP-related Java frameworks and libraries, like RestAssured, Vert.x and Undertow.</p>"},{"location":"#version-compatibility","title":"Version compatibility","text":"<p>Kappa targets providing complete support for OpenAPI 3.1. Currently it uses a draft2020-12 compliant validator for JSON Schema.</p>"},{"location":"#relation-to-openapi4j","title":"Relation to OpenAPI4j","text":"<p>Kappa is a permanent fork (successor) of the archived OpenAPI4J project. The first generally available version of Kappa is 2.0.0. Previous 1.x versions were released under the OpenAPI4j name.</p>"},{"location":"contract-testing/","title":"Contract testing","text":"<p>Kappa has first-class support for testing if your API under testing conforms to its defined OpenAPI description. Seamlessly integrates with MockMvc-based SpringBootTests.</p>"},{"location":"contract-testing/#installation","title":"Installation","text":""},{"location":"contract-testing/#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.github.erosb&lt;/groupId&gt;\n  &lt;artifactId&gt;kappa-spring&lt;/artifactId&gt;\n  &lt;version&gt;2.0.0-RC15&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"contract-testing/#gradle","title":"Gradle","text":"<pre><code>    testImplementation(\"com.github.erosb:kappa-spring:2.0.0-RC15\")\n</code></pre>"},{"location":"contract-testing/#add-a-contract-driven-test","title":"Add a contract-driven test","text":"Add an API definitionTell Kappa about your API definitionImplement the APIAdd an API test <p><code>openapi/pets-api.yaml</code> :</p> <pre><code>openapi: \"3.1.0\"\ninfo:\n  title: \"Pets API\"\n  version: 0.0.1\npaths:\n  /api/pets:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePetRequest\"\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\ncomponents:\n  schemas:\n    Name:\n      type: string\n      minLength: 1\n    Pet:\n      type: object\n      additionalProperties: false\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n        name:\n          $ref: \"#/components/schemas/Name\"\n        owner:\n          type: object\n          additionalProperties: false\n          required:\n            - id\n            - name\n          properties:\n            id:\n              type: integer\n            name:\n              $ref: \"#/components/schemas/Name\"\n        birthDate:\n          type: string\n          format: date\n</code></pre> <p><code>KappaSpringBootExampleApplication.java</code>:</p> <pre><code>@SpringBootApplication\npublic class KappaSpringBootExampleApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KappaSpringBootExampleApplication.class, args);\n    }\n\n    @Bean\n    public KappaSpringConfiguration kappaConfig() {\n        var kappaConfig = new KappaSpringConfiguration();\n        var mapping = new LinkedHashMap&lt;String, String&gt;();\n        mapping.put(\"/**\", \"/openapi/pets-api.yaml\"); // (1)\n        kappaConfig.setOpenapiDescriptions(mapping);\n        return kappaConfig;\n    }\n}\n</code></pre> <ol> <li>If your OpenAPI descriptions are split into multiple files, you can map multiple request paths to yaml files describing them</li> </ol> <p><code>PetController.java</code>:</p> <pre><code>record User(int id, String firstName, String lastName) {\n}\n\nrecord Pet(int id, String name, User owner, long birthDate) {\n}\n\n@RestController\n@RequestMapping(\"/api/pets\")\npublic class PetController {\n\n    @GetMapping\n    List&lt;Pet&gt; getPets() {\n        return List.of(\n            new Pet(\n                1,\n                \"\",\n                new User(2, \"John\", \"Doe\"),\n                LocalDate.parse(\"2017-08-08\").toEpochDay()\n            )\n        );\n    }\n}\n</code></pre> <p><code>ContractDrivenApiTest.java</code>:</p> <pre><code>@SpringBootTest\n@AutoConfigureMockMvc\n@EnableKappaContractTesting //(1)\npublic class ContractDrivenApiTest {\n\n\n    @Autowired\n    MockMvc mvc;\n\n    @Test\n    void testListPets() throws Exception {\n        mvc.perform(get(\"/api/pets\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$.size()\").value(1)); // (2)\n    }\n}\n</code></pre> <ol> <li>This annotation enables contract verification on every request and response.     If either the request or response doesn't match, the API, the test fails</li> <li>The assertions of the test pass, but Kappa will catch the structural mismatches of the response</li> </ol> <p>If you run the above <code>ContractDrivenApiTest</code>, it will fail and report the following errors with the response structure:</p> <ul> <li>an empty pet name is returned, while it is described as a <code>minLength: 1</code> string</li> <li>two undefined properties of the owner are returned: <code>firstName</code> and <code>lastName</code></li> <li>on the other hand, the mandatory <code>name</code> field of the owner is missing</li> </ul> <p>The complete example is available in the Kappa Examples repo.</p>"},{"location":"req-validation/","title":"Request validation","text":""},{"location":"request-validation/","title":"Request validation","text":""}]}