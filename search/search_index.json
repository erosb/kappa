{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kappa","text":"<p>Kappa is an OpenAPI library for the JVM. It supports contract-first API development, and can be used for</p> <ul> <li>Request validation</li> <li>Contract testing</li> </ul> <p>{ .annotate } Click here for understanding the differences</p> <p>Kappa provides first-class Spring Boot integration for both usecases. It also has adapters to work with other HTTP-related Java frameworks and libraries, like RestAssured, Vert.x and Undertow.</p>"},{"location":"#version-compatibility","title":"Version compatibility","text":"<p>Kappa targets providing complete support for OpenAPI 3.1. Currently it uses a draft2020-12 compliant validator for JSON Schema.</p>"},{"location":"#relation-to-openapi4j","title":"Relation to OpenAPI4j","text":"<p>Kappa is a permanent fork (successor) of the archived OpenAPI4J project. The first generally available version of Kappa is 2.0.0. Previous 1.x versions were released under the OpenAPI4j name.</p>"},{"location":"contract-testing/","title":"Contract testing","text":"<p>Kappa has first-class support for testing if your API under testing conforms to its defined OpenAPI description. Seamlessly integrates with MockMvc-based SpringBootTests.</p>"},{"location":"contract-testing/#installation","title":"Installation","text":"MavenGradle <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.github.erosb&lt;/groupId&gt;\n  &lt;artifactId&gt;kappa-spring&lt;/artifactId&gt;\n  &lt;version&gt;2.0.0-RC16&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>  testImplementation(\"com.github.erosb:kappa-spring:2.0.0-RC16\")\n</code></pre>"},{"location":"contract-testing/#add-a-contract-driven-test","title":"Add a contract-driven test","text":"Add an API descriptionTell Kappa about your API definitionImplement the APIAdd an API test <p><code>openapi/pets-api.yaml</code> :</p> <pre><code>openapi: \"3.1.0\"\ninfo:\n  title: \"Pets API\"\n  version: 0.0.1\npaths:\n  /api/pets:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePetRequest\"\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\ncomponents:\n  schemas:\n    Name:\n      type: string\n      minLength: 1\n    Pet:\n      type: object\n      additionalProperties: false\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n        name:\n          $ref: \"#/components/schemas/Name\"\n        owner:\n          type: object\n          additionalProperties: false\n          required:\n            - id\n            - name\n          properties:\n            id:\n              type: integer\n            name:\n              $ref: \"#/components/schemas/Name\"\n        birthDate:\n          type: string\n          format: date\n</code></pre> <p><code>KappaSpringBootExampleApplication.java</code>:</p> <pre><code>@SpringBootApplication\npublic class KappaSpringBootExampleApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KappaSpringBootExampleApplication.class, args);\n    }\n\n    @Bean\n    public KappaSpringConfiguration kappaConfig() {\n        var kappaConfig = new KappaSpringConfiguration();\n        var mapping = new LinkedHashMap&lt;String, String&gt;();\n        mapping.put(\"/**\", \"/openapi/pets-api.yaml\"); // (1)\n        kappaConfig.setOpenapiDescriptions(mapping);\n        return kappaConfig;\n    }\n}\n</code></pre> <ol> <li>If your OpenAPI descriptions are split into multiple files, you can map multiple request paths to yaml files describing them</li> </ol> <p><code>PetController.java</code>:</p> <pre><code>record User(int id, String firstName, String lastName) {\n}\n\nrecord Pet(int id, String name, User owner, long birthDate) {\n}\n\n@RestController\n@RequestMapping(\"/api/pets\")\npublic class PetController {\n\n    @GetMapping\n    List&lt;Pet&gt; getPets() {\n        return List.of(\n            new Pet(\n                1,\n                \"\",\n                new User(2, \"John\", \"Doe\"),\n                LocalDate.parse(\"2017-08-08\").toEpochDay()\n            )\n        );\n    }\n}\n</code></pre> <p><code>ContractDrivenApiTest.java</code>:</p> <pre><code>@SpringBootTest\n@AutoConfigureMockMvc\n@EnableKappaContractTesting //(1)\npublic class ContractDrivenApiTest {\n\n\n    @Autowired\n    MockMvc mvc;\n\n    @Test\n    void testListPets() throws Exception {\n        mvc.perform(get(\"/api/pets\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$.size()\").value(1)); // (2)\n    }\n}\n</code></pre> <ol> <li>This annotation enables contract verification on every request and response.     If either the request or response doesn't match, the API, the test fails</li> <li>The assertions of the test pass, but Kappa will catch the structural mismatches of the response</li> </ol> <p>If you run the above <code>ContractDrivenApiTest</code>, it will fail and report the following errors with the response structure:</p> <ul> <li>an empty pet name is returned, while it is described as a <code>minLength: 1</code> string</li> <li>two undefined properties of the owner are returned: <code>firstName</code> and <code>lastName</code></li> <li>on the other hand, the mandatory <code>name</code> field of the owner is missing</li> </ul> <p>The complete example is available in the Kappa Examples repo.</p>"},{"location":"request-validation/","title":"Request validation","text":"<p>Kappa can validate your incoming HTTP requests against your OpenAPI descriptions. Malformed requests won't reach the spring controllers, hence the bad request will fail early. Still the HTTP client will receive a programmer-readable error description about what went wrong.</p>"},{"location":"request-validation/#installation","title":"Installation","text":"MavenGradle <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.github.erosb&lt;/groupId&gt;\n  &lt;artifactId&gt;kappa-spring&lt;/artifactId&gt;\n  &lt;version&gt;2.0.0-RC16&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>  testImplementation(\"com.github.erosb:kappa-spring:2.0.0-RC16\")\n</code></pre>"},{"location":"request-validation/#enable-openapi-based-http-request-validation","title":"Enable OpenAPI-based HTTP request validation","text":"Add an API descriptionConfigure KappaAdd the REST Controller <p><code>openapi/pets-api.yaml</code> :</p> <pre><code>openapi: \"3.1.0\"\ninfo:\n  title: \"Pets API\"\n  version: 0.0.1\npaths:\n  /api/pets:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePetRequest\"\ncomponents:\n  schemas:\n    CreatePetRequest:\n      type: object\n      additionalProperties: false\n      required:\n        - name\n        - owner\n      properties:\n        name:\n          $ref: \"#/components/schemas/Name\"\n        owner:\n          $ref: \"./common-types.yaml#/UserIdentifier\"\n        birthDate:\n          type: string\n          format: date\n    Name:\n      type: string\n      minLength: 1\n</code></pre> <p><code>KappaSpringBootExampleApplication.java</code>:</p> <pre><code>@SpringBootApplication\n@EnableKappaRequestValidation // (1)\npublic class KappaSpringBootExampleApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KappaSpringBootExampleApplication.class, args);\n    }\n\n    @Bean\n    public KappaSpringConfiguration kappaConfig() {\n        var kappaConfig = new KappaSpringConfiguration();\n        var mapping = new LinkedHashMap&lt;String, String&gt;();\n        mapping.put(\"/**\", \"/openapi/pets-api.yaml\");\n        kappaConfig.setOpenapiDescriptions(mapping);\n        return kappaConfig;\n    }\n}\n</code></pre> <ol> <li>Sets up a servlet filter for validating incoming HTTP requests</li> </ol> <pre><code>record UserIdentifier(String id) {\n}\n\nrecord CreatePetRequest(String name, UserIdentifier owner, LocalDate birthDate) {\n}\n\n@RestController\n@RequestMapping(\"/api/pets\")\npublic class PetController {\n\n    @PostMapping\n    void createPet(@RequestBody CreatePetRequest requestBody) {\n        System.out.println(\"requestBody = \" + requestBody);\n    }\n}\n</code></pre>"},{"location":"request-validation/#try-it-out","title":"Try it out!","text":"<p>If you start <code>KappaSpringBootExampleApplication</code> and send a request with <code>curl</code> (or your preferred HTTP client), the request will also be validated:</p> <pre><code>curl -XPOST http://localhost:8080/api/pets \\\n  -H 'content-type: application/json' \\\n  --data '{\"name\": null,\"type\":\"cat\",\"owner\":{\"id\": -5},\"birthDate\":\"20230708\"}'\n</code></pre> <p>the above command will print the following output:</p> <pre><code>{\n  \"errors\" : [ {\n    \"dataLocation\" : \"$request.body#/type (line 1, position 22)\",\n    \"schemaLocation\" : \"openapi/pets-api.yaml#/components/schemas/CreatePetRequest/additionalProperties\",\n    \"dynamicPath\" : \"#/$ref/additionalProperties/false\",\n    \"message\" : \"false schema always fails\"\n  }, {\n    \"dataLocation\" : \"$request.body#/name (line 1, position 10)\",\n    \"schemaLocation\" : \"openapi/pets-api.yaml#/components/schemas/Name/type\",\n    \"dynamicPath\" : \"#/$ref/properties/name/$ref/type\",\n    \"message\" : \"expected type: string, actual: null\"\n  }, {\n    \"dataLocation\" : \"$request.body#/owner/id (line 1, position 43)\",\n    \"schemaLocation\" : \"openapi/common-types.yaml#/Id\",\n    \"dynamicPath\" : \"#/$ref/properties/owner/$ref/properties/id/$ref/minimum\",\n    \"message\" : \"-5 is lower than minimum 0\"\n  }, {\n    \"dataLocation\" : \"$request.body#/birthDate (line 1, position 59)\",\n    \"schemaLocation\" : \"openapi/pets-api.yaml#/components/schemas/CreatePetRequest/properties/birthDate/format\",\n    \"dynamicPath\" : \"#/$ref/properties/birthDate/format\",\n    \"message\" : \"instance does not match format 'date'\"\n  } ]\n}\n</code></pre> <p>These json schema validation errors tell us the following problems with the json payload:</p> <ul> <li>the <code>\"type\"</code> field sent in the request is not recognized by the service</li> <li>the <code>\"name\"</code> should be a string, never null, like in our request</li> <li>the <code>\"owner.id\"</code> property should be non-negative, so <code>-5</code> is invalid</li> <li>the <code>\"birthDate\"</code> also does not match the expected date format</li> </ul>"}]}